#include<iostream>
#include<stdio.h>
#include<cstdlib>
#include<time.h>
#include<conio.h>
using namespace std;
struct food
{
    int x,y;
    char value;

};
struct node
{
    int x,y;
    char value;
    struct node *next;
};
void print(struct node*head)
{
    struct node *ptr=head;
    while(ptr!=NULL)
    {
        cout<<ptr->value<<" ";
        ptr=ptr->next;
    }
    cout<<endl;
}
void swap(int *a,int *b)
{
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}
struct node* insertion(struct node *start,int a,int b,int ch,char** arr)
{
           struct node *ptr,*n;
        ptr=start;
        n=new node;
       if(start==NULL)
        {
        n->x=a;
        n->y=b;
        n->value=ch;
       start=n;
       start->next=NULL;
       ptr=start;
        }
        else
        {
        while(ptr->next!=NULL)
        {
            ptr=ptr->next;
        }
           n->x=a;
        n->y=b;
        n->value=ch;
        ptr->next=n;
        n->next=NULL;
        ptr=ptr->next;
        }
            arr[a][b]=ch;
   return start;
}
struct node* deletion(char **arr,struct node *head,int *p_x,int *p_y,int *flag)
{
  int row,col;
struct node*ptr=head,*temp;
if(head->next->next==NULL)
{
   *flag=1;
}
else{*flag=0;
    row=head->x;
    col=head->y;
    ptr->x=*p_x;
    ptr->y=*p_y;
    arr[ptr->x][ptr->y]=ptr->value;
    ptr=ptr->next;
    while(ptr->next->next!=NULL)
    {
    swap(&ptr->x,&row);
    swap(&ptr->y,&col);
       arr[ptr->x][ptr->y]=ptr->value;
        ptr=ptr->next;
    }
arr[ptr->x][ptr->y]=' ';
ptr->x=row;
ptr->y=col;
ptr->value='T';
arr[ptr->x][ptr->y]=ptr->value;
temp=ptr->next;
ptr->next=NULL;
arr[temp->x][temp->y]=' ';
delete(temp);
}
return head;
}
struct node* insertionAtEnd(struct node *start)
{
        struct node *ptr,*n;
        ptr=start;
        n=new node;
       if(start==NULL)
        {
        n->x=4;
        n->y=2;
        n->value='H';
       start=n;
       start->next=NULL;
       ptr=start;
        }
        else
        {
           n->x=4;
        n->y=1;
        n->value='T';
        ptr->next=n;
        n->next=NULL;
        ptr=ptr->next;
        }
   return start;
}
void data_save(struct node *head,struct food *f,int score,int p_x,int p_y)
{
    FILE *fp,*fp1,*fp2;
    fp=fopen("snake.txt","w");
    fp1=fopen("food.txt","w");
    fp2=fopen("score.txt","w");
    struct node *ptr=head;
    while(ptr!=NULL)
    {
        putc(ptr->x+'0',fp);
         putc(ptr->y+'0',fp);
          putc(ptr->value,fp);
           putc('\n',fp);
        ptr=ptr->next;
    }
     putc(f->x+'0',fp1);
      putc(f->y+'0',fp1);
       putc(f->value,fp1);
       putc(p_x+'0',fp2);
       putc(p_y+'0',fp2);
       putc('\n',fp2);
       putc(score+'0',fp2);

fclose(fp);
fclose(fp1);
fclose(fp2);
}
void set_food(char **arr,struct food *f,struct node *head)
{
    struct node*ptr=head;
    (*f).value='*';
while(ptr!=NULL)
{
 if(ptr->x==(*f).x && ptr->y==(*f).y)
 {
    (*f).x=(*f).x+5;
    (*f).y=(*f).y+5;
  if((*f).x>18  && (*f).y>18)
    {
        (*f).y=(*f).y-16;
        (*f).x=(*f).x-16;
    }
     else if((*f).y>18)
    {
     (*f).y=(*f).y-16;
    }
    else if((*f).x>18)
    {
     (*f).x=(*f).x-16;
    }

arr[(*f).x][(*f).y]=(*f).value;
  }
        ptr=ptr->next;
}
if((*f).x==0 || (*f).x==19)
  {
    if((*f).x==0)
    {
    (*f).x=(*f).x+2;
    }
    else
    {
        (*f).x=(*f).x-16;
    }
arr[(*f).x][(*f).y]=(*f).value;
  }
else if((*f).y==0 || (*f).y==19)
  {
    if((*f).y==0)
    {
    (*f).y=(*f).y+2;
    }
    else
    {
        (*f).y=(*f).y-16;
    }
arr[(*f).x][(*f).y]=(*f).value;
}
  else
{
arr[(*f).x][(*f).y]=(*f).value;
}
}
void set_poison(struct food *f,struct node *head,int *p_x,int *p_y)
{
int x,y;
x=*p_x;
y=*p_y;
    struct node*ptr=head;
while(ptr!=NULL)
{
 if(ptr->x==*p_x && ptr->y==*p_y)
 {
    x=x+5;
    y=y+5;
  if(*p_x>18  && *p_y>18)
    {
        y=y-16;
        x=x-16;
    }
     else if(*p_y>18)
    {
     y=y-16;
    }
    else if(*p_x>18)
    {
     x=x-16;
    }
  }
        ptr=ptr->next;
}
if(*p_x==0 ||*p_x==19)
  {
    if(*p_x==0)
    {
    x=x+2;
    }
    else
    {
        x=x-16;
    }
  }
else if(*p_y==0 || *p_y==19)
  {
    if(*p_y==0)
    {
    y=y+2;
    }
    else
    {
    y=y-16;
    }
}
  else if((*p_x==(*f).x) && (*p_y==(*f).y))
{
     y=y+2;
    x=x+2;
}
*p_x=x;
*p_y=y;
}
int gameover(struct node *start)
{
    int flag=0;
    struct node *ptr=start->next;
    while(ptr!=NULL)
    {
     if(start->x==ptr->x && start->y==ptr->y)
     {
         flag=1;
         break;
     }
        ptr=ptr->next;
    }
  return flag;
}
struct node* savegame(char **arr,struct node *head,struct food *f,int *score,int *p_x,int *p_y)
{
    int option;
    cout<<"PRESS 1 TO RESUME GAME:-"<<endl;
        cout<<"PRESS 2 TO NEW GAME:-"<<endl;
    cin>>option;
 if(option==1)
 {
FILE *fp,*fp1,*fp2;
fp=fopen("snake.txt","r");
fp2=fopen("score.txt","r");
fp1=fopen("food.txt","r");
char ch,s;
int a,b;
ch=getc(fp);
if(ch==EOF)
    {
        cout<<"Sorry no save game please start new game"<<endl;
         struct node *tail;
    head=insertionAtEnd(head);
    arr[head->x][head->y]=head->value;
    head=insertionAtEnd(head);
    tail=head->next;
    arr[tail->x][tail->y]=tail->value;
    (*f).x=rand()%10;
    (*f).y=rand()%10;
    (*f).value='*';
    set_food(arr,f,head);
    arr[(*f).x][(*f).y]=(*f).value;
    *score=0;
     *p_x=rand()%10;
    *p_y=rand()%10;
    set_poison(f,head,p_x,p_y);
    arr[*p_x][*p_y]='P';
    }
else{
while(ch!=EOF)
    {
        if(ch!='\n')
        {
    a=ch-'0';
   ch=getc(fp);
   b=ch-'0';
   ch=getc(fp);
   s=ch;
    head=insertion(head,a,b,s,arr);
}
else
{
a=0;b=0;s='\0';
}
ch=getc(fp);
}
char ch1;
ch1=getc(fp1);
while(ch1!=EOF)
{
(*f).x=ch1-'0';
   ch1=getc(fp1);
   (*f).y=ch1-'0';
   ch1=getc(fp1);
   (*f).value=ch1;
    arr[(*f).x][(*f).y]=(*f).value;
ch1=getc(fp1);
}
fclose(fp);
fclose(fp1);
char ch2;
ch2=getc(fp2);
while(ch2!='\n')
{
*p_x=ch2-'0';
ch2=getc(fp2);
*p_y=ch2-'0';
ch2=getc(fp2);
}
 arr[*p_x][*p_y]='P';
ch2=getc(fp2);
*score=ch2-'0';
fclose(fp2);
 }
 }
 else
{
    struct node *tail;
    head=insertionAtEnd(head);
    arr[head->x][head->y]=head->value;
    head=insertionAtEnd(head);
    tail=head->next;
    arr[tail->x][tail->y]=tail->value;
    (*f).x=rand()%10;
    (*f).y=rand()%10;
    (*f).value='*';
    set_food(arr,f,head);
    arr[(*f).x][(*f).y]=(*f).value;
    *score=0;
     *p_x=rand()%10;
    *p_y=rand()%10;
    set_poison(f,head,p_x,p_y);
    arr[*p_x][*p_y]='P';
}
 return head;
}
struct node* eat_food(char **arr,struct food *f,struct node *head)
{
 struct node *n,*ptr=head;
  n=new node;
  n->x=(*f).x;
  n->y=(*f).y;
  n->value=head->value;
  arr[n->x][n->y]=head->value;
  n->next=head;
  head->value=(*f).value;
  arr[ptr->x][ptr->y]=(*f).value;
  head=n;
  (*f).x=rand()%10;
  (*f).y=rand()%10;
  return head;
}
struct node* eat_poison(char **arr,struct node *head,int *p_x,int *p_y,struct food *f,int *flag)
{
head=deletion(arr,head,p_x,p_y,flag);
  *p_x=rand()%10;
  *p_y=rand()%10;
  set_poison(f,head,p_x,p_y);
  arr[*p_x][*p_y]='P';
  return head;
}
void file_empty()
{
     FILE *fp,*fp1,*fp2;
    fp=fopen("snake.txt","w");
    fp1=fopen("food.txt","w");
    fp2=fopen("score.txt","w");
    fclose(fp);
    fclose(fp1);
    fclose(fp2);
}
void movement(char**arr,struct node *head,int row,int col)
{struct node*ptr=head;
    arr[ptr->x][ptr->y]=ptr->value;
        ptr=ptr->next;
      while(ptr->next!=NULL)
    {
    swap(&ptr->x,&row);
    swap(&ptr->y,&col);
       arr[ptr->x][ptr->y]=ptr->value;
        ptr=ptr->next;
    }
    if(head->x==ptr->x && head->y==ptr->y)
    {
       arr[ptr->x][ptr->y]='H';
    swap(&ptr->x,&row);
    swap(&ptr->y,&col);
    arr[ptr->x][ptr->y]=ptr->value;
    }
    else{
    arr[ptr->x][ptr->y]=' ';
    swap(&ptr->x,&row);
    swap(&ptr->y,&col);
    arr[ptr->x][ptr->y]=ptr->value;
}
}
void start(char **arr,struct node *head,struct food *f,int score,int p_x,int p_y)
{
char option;
int flag=0,flg=0,poison=0;
cout<<"Enter q to start:- ";
cin>>option;
while(option!='x')
{
int row=0,col=0;
struct node *ptr=head,*n=NULL;
if(option=='w')
{
if(((head->x)-1)== head->next->x)
    {
        cout<<"invalid option"<<endl;
    }
 else if(((head->x)-1)==(*f).x && head->y==(*f).y)
{
  head=eat_food(arr,f,head);
  set_food(arr,f,head);
 score++;
}
 else if(((head->x)-1)==p_x && head->y==p_y )
{
  head=eat_poison(arr,head,&p_x,&p_y,f,&flag);
  score--;
  poison++;
}
else if(((head->x)-1)>0)
{
    row=head->x;
    col=head->y;
    ptr->x=ptr->x-1;
    movement(arr,head,row,col);
}
else if(((head->x)-1)<1)
{
    row=head->x;
    col=head->y;
    ptr->x=18;
   movement(arr,head,row,col);
}
flg=gameover(head);
}
else if(option=='d')
{
    if(((head->y)+1)== head->next->y)
    {
        cout<<"invalid option"<<endl;
    }
else if(((head->y)+1)==(*f).y && head->x==(*f).x)
{
      head=eat_food(arr,f,head);
     set_food(arr,f,head);
    score++;
}
else if(((head->y)+1)==p_y && head->x==p_x )
{
 head=eat_poison(arr,head,&p_x,&p_y,f,&flag);
  score--;
    poison++;
}
else if(((head->y)+1)<19)
{
    row=head->x;
    col=head->y;
    ptr->y=ptr->y+1;
   movement(arr,head,row,col);
}
else if(((head->y)+1)>=19)
{
    row=head->x;
    col=head->y;
    ptr->y=1;
    movement(arr,head,row,col);
}
flg=gameover(head);

}
 else if(option=='a')
{
if(((head->y)-1)== head->next->y)
    {
        cout<<"invalid option"<<endl;
    }
else if(((head->y)-1)==(*f).y && head->x==(*f).x)
{
     head=eat_food(arr,f,head);
     set_food(arr,f,head);
     score++;
}
 else if(((head->y)-1)==p_y && head->x==p_x)
{
 head=eat_poison(arr,head,&p_x,&p_y,f,&flag);
  score--;  poison++;
}
else if(((head->y)-1)>=1)
{    row=head->x;
    col=head->y;
    ptr->y=ptr->y-1;
   movement(arr,head,row,col);
}
else if(((head->y)-1)<1)
{
    row=head->x;
    col=head->y;
    ptr->y=18;
  movement(arr,head,row,col);
}
flg=gameover(head);
}
else if(option=='s')
{
if(((head->x)+1)== head->next->x)
    {
        cout<<"invalid option"<<endl;
    }
   else if(((head->x)+1)==(*f).x && head->y==(*f).y)
{
     head=eat_food(arr,f,head);
     set_food(arr,f,head);
     score++;
}
 else if(((head->x)+1)==p_x && head->y==p_y)
{
 head=eat_poison(arr,head,&p_x,&p_y,f,&flag);
  score--;  poison++;
}
else if(((head->x)+1)<19)
{
    row=head->x;
    col=head->y;
    ptr->x=ptr->x+1;
    movement(arr,head,row,col);
}
else if(((head->x)+1)>=19)
{
    row=head->x;
    col=head->y;
    ptr->x=1;
   movement(arr,head,row,col);
}
flg=gameover(head);
}
else if(option!='q')
{
cout<<"invalid option "<<endl;
}
if(flag==0 && flg==0){
cout<<"Points:- "<<score<<"          "<<"Poison:- "<<poison<<endl;
    for(int i=0;i<20;i++)
    {
        for(int j=0;j<20;j++)
        {

            cout<<arr[i][j]<<" ";
        }
        cout<<endl;}
}
else
{
cout<<"GAMEOVER"<<endl;
break;
}
   cout<<"Enter x to exit:- ";
    cin>>option;
    system("CLS");
}
if(flag==0)
{
    char s;
    cout<<"WANT TO SAVE GAME(y/n):-"<<endl;
    cin>>s;
    if(s=='y')
    {
   data_save(head,f,score,p_x,p_y);
    }
    else if(s=='n')
    {
  file_empty();
    }
    else
    {
    cout<<"invalid option"<<endl;
    }
}
else
{
     file_empty();
}
cout<<"Final score is:- "<<score;
}
void snakegame(char **arr)
{
    int i,j,score;
    struct food *f;
    int p_x,p_y;
    srand(time(NULL));
    struct node *head=NULL,*tail;
    head=savegame(arr,head,f,&score,&p_x,&p_y);
   start(arr,head,f,score,p_x,p_y);
}
int main()
{
    char **arr=new char*[20];
    int i,j;
    for(i=0;i<20;i++)
    {
        arr[i]=new char[20];
    }

    for(i=0;i<20;i++)
    {
        for(j=0;j<20;j++)
        {
            if(i==0 || i==19)
            {
            arr[i][j]='-';
            }
            else if(j==0 || j==19)
            {
                arr[i][j]='|';
            }
            else{
            arr[i][j]=' ';
            }
        }
      }
    snakegame(arr);
}
